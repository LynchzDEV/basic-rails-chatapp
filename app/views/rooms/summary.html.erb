<% content_for :title, "Room Summary" %>

<div class="container">
  <div class="header">
    <h1>Room Summary</h1>
  </div>

  <% if @rooms.empty? %>
    <div class="empty-state">
      <div class="empty-state-icon">ðŸ“Š</div>
      <h3>No Rooms Available</h3>
      <p>Create your first chat room to get started with conversations.</p>
      <%= link_to new_room_path, class: "button" do %>
        <span>+</span> Create Room
      <% end %>
    </div>
  <% else %>
    <!-- Activity Overview Chart -->
    <div class="card chart-card">
      <h3>Activity Overview</h3>
      <div class="chart-container">
        <canvas id="activityChart"></canvas>
      </div>
    </div>

    <div class="chart-grid">
      <!-- Messages by Room Chart -->
      <div class="card chart-card">
        <h3>Messages by Room</h3>
        <div class="chart-container">
          <canvas id="roomsChart"></canvas>
        </div>
      </div>

      <!-- Message Distribution Chart -->
      <div class="card chart-card">
        <h3>Message Distribution</h3>
        <div class="chart-container">
          <canvas id="distributionChart"></canvas>
        </div>
      </div>
    </div>

    <div class="card">
      <div class="stats-summary">
        <div class="stat-card">
          <span class="stat-value"><%= @rooms.count %></span>
          <span class="stat-label">Total Rooms</span>
        </div>
        <div class="stat-card">
          <span class="stat-value"><%= @rooms.map(&:messages).flatten.count rescue 0 %></span>
          <span class="stat-label">Total Messages</span>
        </div>
        <div class="stat-card">
          <span class="stat-value"><%= @rooms.order(created_at: :desc).first&.created_at&.strftime("%b %d") || "N/A" %></span>
          <span class="stat-label">Latest Room</span>
        </div>
      </div>

      <div class="table-container">
        <table class="apple-table">
          <thead>
            <tr>
              <th>Room</th>
              <th>Messages</th>
              <th>Created</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <% @rooms.each do |room| %>
              <tr class="interactive-row">
                <td><%= link_to room.name, room_path(room), class: "room-link" %></td>
                <td><span class="message-count"><%= room.messages.count rescue "0" %></span></td>
                <td><%= room.created_at.strftime("%b %d, %Y") %></td>
                <td class="actions-cell">
                  <%= link_to "View", room_path(room), class: "table-action" %>
                  <%= link_to "Edit", edit_room_path(room), class: "table-action" %>
                </td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </div>
    </div>
  <% end %>

  <div class="help-text">
    <p>Click on a room name to view its messages and participate in the conversation.</p>
  </div>
</div>

<% if @rooms.any? %>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      Chart.defaults.font.family = '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif';
      Chart.defaults.color = '#86868b';
      Chart.defaults.borderColor = '#d2d2d7';

        const appleColors = [
        '#007AFF', // Blue
        '#5AC8FA', // Light Blue
        '#34C759', // Green
        '#FF9500', // Orange
        '#FF2D55', // Pink
        '#AF52DE', // Purple
        '#5856D6', // Indigo
        '#FF3B30'  // Red
      ];

      const roomNames = <%= raw @rooms.map(&:name).to_json %>;
      const messageCounts = <%= raw @rooms.map { |room| room.messages.count rescue 0 }.to_json %>;

      const activityCtx = document.getElementById('activityChart').getContext('2d');
      const dates = [];
      const messageData = [];

      // Create sample data for the past 7 days
      for (let i = 6; i >= 0; i--) {
        const date = new Date();
        date.setDate(date.getDate() - i);
        dates.push(date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }));
        messageData.push(Math.floor(Math.random() * 25) + 1);
      }

      new Chart(activityCtx, {
        type: 'line',
        data: {
          labels: dates,
          datasets: [{
            label: 'Messages',
            data: messageData,
            borderColor: appleColors[0],
            backgroundColor: hexToRgba(appleColors[0], 0.1),
            tension: 0.4,
            fill: true,
            pointBackgroundColor: '#ffffff',
            pointBorderColor: appleColors[0],
            pointBorderWidth: 2,
            pointRadius: 4,
            pointHoverRadius: 6
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false
            },
            tooltip: {
              backgroundColor: 'rgba(255, 255, 255, 0.9)',
              titleColor: '#1d1d1f',
              bodyColor: '#1d1d1f',
              borderColor: '#d2d2d7',
              borderWidth: 1,
              cornerRadius: 8,
              displayColors: false,
              callbacks: {
                title: function(tooltipItems) {
                  return tooltipItems[0].label;
                },
                label: function(context) {
                  return `${context.parsed.y} messages`;
                }
              }
            }
          },
          scales: {
            x: {
              grid: {
                display: false
              }
            },
            y: {
              beginAtZero: true,
              grid: {
                drawBorder: false
              },
              ticks: {
                precision: 0
              }
            }
          }
        }
      });

      const roomsCtx = document.getElementById('roomsChart').getContext('2d');
      new Chart(roomsCtx, {
        type: 'bar',
        data: {
          labels: roomNames,
          datasets: [{
            label: 'Messages',
            data: messageCounts,
            backgroundColor: appleColors.map(color => hexToRgba(color, 0.8)),
            borderRadius: 6
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false
            },
            tooltip: {
              backgroundColor: 'rgba(255, 255, 255, 0.9)',
              titleColor: '#1d1d1f',
              bodyColor: '#1d1d1f',
              borderColor: '#d2d2d7',
              borderWidth: 1,
              cornerRadius: 8,
              displayColors: false,
              callbacks: {
                label: function(context) {
                  return `${context.parsed.y} messages`;
                }
              }
            }
          },
          scales: {
            x: {
              grid: {
                display: false
              }
            },
            y: {
              beginAtZero: true,
              grid: {
                drawBorder: false
              },
              ticks: {
                precision: 0
              }
            }
          }
        }
      });

      const distCtx = document.getElementById('distributionChart').getContext('2d');
      new Chart(distCtx, {
        type: 'doughnut',
        data: {
          labels: roomNames,
          datasets: [{
            data: messageCounts,
            backgroundColor: appleColors.map(color => hexToRgba(color, 0.8)),
            borderWidth: 2,
            borderColor: '#ffffff'
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          cutout: '70%',
          plugins: {
            legend: {
              position: 'right',
              labels: {
                boxWidth: 15,
                padding: 15,
                font: {
                  size: 12
                }
              }
            },
            tooltip: {
              backgroundColor: 'rgba(255, 255, 255, 0.9)',
              titleColor: '#1d1d1f',
              bodyColor: '#1d1d1f',
              borderColor: '#d2d2d7',
              borderWidth: 1,
              cornerRadius: 8,
              callbacks: {
                label: function(context) {
                  const totalMessages = messageCounts.reduce((a, b) => a + b, 0);
                  const percentage = Math.round((context.parsed / totalMessages) * 100);
                  return `${context.parsed} messages (${percentage}%)`;
                }
              }
            }
          }
        }
      });

      function hexToRgba(hex, alpha) {
        const r = parseInt(hex.slice(1, 3), 16);
        const g = parseInt(hex.slice(3, 5), 16);
        const b = parseInt(hex.slice(5, 7), 16);
        return `rgba(${r}, ${g}, ${b}, ${alpha})`;
      }
    });
  </script>
<% end %>
